# Generated by Django 5.0.4 on 2024-06-07 20:28

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='RegisteredUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('iduser', models.AutoField(db_column='IDUser', primary_key=True, serialize=False)),
                ('email', models.CharField(db_column='Email', max_length=254, unique=True)),
                ('username', models.CharField(db_column='Username', max_length=25)),
                ('status', models.CharField(db_column='Status', max_length=3)),
                ('dateregistered', models.DateTimeField(db_column='DateRegistered')),
                ('profilepicture', models.BinaryField(blank=True, db_column='ProfilePicture', null=True)),
                ('aboutsection', models.CharField(blank=True, db_column='AboutSection', max_length=200, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'registered_user',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Forum',
            fields=[
                ('idforum', models.AutoField(db_column='IDForum', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=50)),
                ('coverimage', models.BinaryField(db_column='CoverImage')),
                ('bannerimage', models.BinaryField(db_column='BannerImage')),
                ('description', models.CharField(db_column='Description', max_length=1000)),
                ('status', models.CharField(db_column='Status', max_length=3)),
                ('datecreated', models.DateTimeField(db_column='DateCreated')),
            ],
            options={
                'db_table': 'forum',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('idnot', models.AutoField(db_column='IDNot', primary_key=True, serialize=False)),
                ('datesent', models.DateTimeField(db_column='DateSent')),
            ],
            options={
                'db_table': 'notification',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ForumNumOfPlayers',
            fields=[
                ('idforumnumofplayers', models.AutoField(db_column='IDForumNumOfPlayers', primary_key=True, serialize=False)),
                ('numberofplayers', models.IntegerField(db_column='NumberOfPlayers')),
            ],
            options={
                'db_table': 'forum_num_of_players',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LikedComment',
            fields=[
                ('idlike', models.AutoField(db_column='IDLike', primary_key=True, serialize=False)),
                ('dateliked', models.DateTimeField(db_column='DateLiked')),
            ],
            options={
                'db_table': 'liked_comment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LikedPost',
            fields=[
                ('idlike', models.AutoField(db_column='IDLike', primary_key=True, serialize=False)),
                ('dateliked', models.DateTimeField(db_column='DateLiked')),
            ],
            options={
                'db_table': 'liked_post',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('body', models.CharField(db_column='Body', max_length=2000)),
                ('idmsg', models.AutoField(db_column='IDMsg', primary_key=True, serialize=False)),
                ('datesent', models.DateTimeField(db_column='DateSent')),
            ],
            options={
                'db_table': 'message',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Moderates',
            fields=[
                ('idmoderates', models.AutoField(db_column='IDModerates', primary_key=True, serialize=False)),
                ('datepromoted', models.DateTimeField(db_column='DatePromoted')),
            ],
            options={
                'db_table': 'moderates',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Participate',
            fields=[
                ('idpar', models.AutoField(db_column='IDPar', primary_key=True, serialize=False)),
                ('position', models.IntegerField(db_column='Position')),
                ('points', models.IntegerField(db_column='Points')),
            ],
            options={
                'db_table': 'participate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('idpost', models.AutoField(db_column='IDPost', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='Title', max_length=200)),
                ('body', models.CharField(blank=True, db_column='Body', max_length=15000, null=True)),
                ('status', models.CharField(db_column='Status', default='ACT', max_length=3)),
                ('datecreated', models.DateTimeField(db_column='DateCreated')),
            ],
            options={
                'db_table': 'post',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RequestToJoin',
            fields=[
                ('idreq', models.AutoField(db_column='IDReq', primary_key=True, serialize=False)),
                ('requestdate', models.DateTimeField(db_column='RequestDate')),
            ],
            options={
                'db_table': 'request_to_join',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('idteam', models.AutoField(db_column='IDTeam', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=20)),
                ('numberofplayers', models.IntegerField(db_column='NumberOfPlayers')),
                ('status', models.CharField(db_column='Status', max_length=3)),
                ('description', models.CharField(db_column='Description', max_length=200)),
                ('datecreated', models.DateTimeField(db_column='DateCreated')),
            ],
            options={
                'db_table': 'team',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('idmember', models.AutoField(db_column='IDMember', primary_key=True, serialize=False)),
                ('isleader', models.BooleanField(db_column='IsLeader')),
                ('datejoined', models.DateTimeField(db_column='DateJoined')),
                ('lastmsgreaddate', models.DateTimeField(db_column='LastMsgReadDate')),
            ],
            options={
                'db_table': 'team_member',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('idtour', models.AutoField(db_column='IDTour', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=30)),
                ('startdate', models.DateTimeField(db_column='StartDate')),
                ('numberofplaces', models.IntegerField(db_column='NumberOfPlaces')),
                ('format', models.CharField(db_column='Format', max_length=30)),
                ('rewardvalue', models.IntegerField(db_column='RewardValue')),
                ('rewardcurrency', models.CharField(db_column='RewardCurrency', max_length=20)),
                ('datecreated', models.DateTimeField(db_column='DateCreated')),
                ('status', models.CharField(db_column='Status', default='NOT_STARTED', max_length=12)),
            ],
            options={
                'db_table': 'tournament',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserParticipated',
            fields=[
                ('iduserpar', models.AutoField(db_column='IDUserPar', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'user_participated',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CreateTournamentUser',
            fields=[
                ('iduser', models.OneToOneField(db_column='IDUser', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'create_tournament_user',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('idcom', models.AutoField(db_column='IDCom', primary_key=True, serialize=False)),
                ('body', models.CharField(db_column='Body', max_length=15000)),
                ('status', models.CharField(db_column='Status', default='ACT', max_length=3)),
                ('datecreated', models.DateTimeField(db_column='DateCreated')),
                ('iduser', models.ForeignKey(db_column='IDUser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('idfollow', models.AutoField(db_column='IDFollow', primary_key=True, serialize=False)),
                ('datefollowed', models.DateTimeField(db_column='DateFollowed')),
                ('iduser', models.ForeignKey(db_column='IDUser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'follow',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ForgotPassword',
            fields=[
                ('idforgot', models.AutoField(db_column='IDForgot', primary_key=True, serialize=False)),
                ('resetkey', models.CharField(db_column='ResetKey', max_length=37, unique=True)),
                ('expirationdate', models.DateTimeField(db_column='ExpirationDate')),
                ('iduser', models.ForeignKey(db_column='IDUser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'forgot_password',
                'managed': True,
            },
        ),
        migrations.AddConstraint(
            model_name='forum',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['ACT', 'DEL'])), name='forum_status_in_act_or_del'),
        ),
        migrations.AddField(
            model_name='follow',
            name='idforum',
            field=models.ForeignKey(db_column='IDForum', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.forum'),
        ),
        migrations.CreateModel(
            name='ForumNotification',
            fields=[
                ('idnot', models.OneToOneField(db_column='IDNot', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='GameHubApp.notification')),
                ('type', models.CharField(db_column='Type', max_length=12)),
            ],
            options={
                'db_table': 'forum_notification',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TeamNotification',
            fields=[
                ('idnot', models.OneToOneField(db_column='IDNot', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='GameHubApp.notification')),
                ('type', models.CharField(db_column='Type', max_length=12)),
            ],
            options={
                'db_table': 'team_notification',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TourNotification',
            fields=[
                ('idnot', models.OneToOneField(db_column='IDNot', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='GameHubApp.notification')),
                ('type', models.CharField(db_column='Type', max_length=13)),
            ],
            options={
                'db_table': 'tour_notification',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='notification',
            name='iduser',
            field=models.ForeignKey(db_column='IDUser', on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='forumnumofplayers',
            name='idforum',
            field=models.ForeignKey(db_column='IDForum', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.forum'),
        ),
        migrations.AddField(
            model_name='likedcomment',
            name='idcom',
            field=models.ForeignKey(db_column='IDCom', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.comment'),
        ),
        migrations.AddField(
            model_name='likedcomment',
            name='iduser',
            field=models.ForeignKey(db_column='IDUser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='likedpost',
            name='iduser',
            field=models.ForeignKey(db_column='IDUser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='message',
            name='iduser',
            field=models.ForeignKey(db_column='IDUser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='moderates',
            name='idforum',
            field=models.ForeignKey(db_column='IDForum', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.forum'),
        ),
        migrations.AddField(
            model_name='post',
            name='idforum',
            field=models.ForeignKey(db_column='IDForum', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.forum'),
        ),
        migrations.AddField(
            model_name='post',
            name='iduser',
            field=models.ForeignKey(db_column='IDUser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='likedpost',
            name='idpost',
            field=models.ForeignKey(db_column='IDPost', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.post'),
        ),
        migrations.AddField(
            model_name='comment',
            name='idpost',
            field=models.ForeignKey(db_column='IDPost', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.post'),
        ),
        migrations.AddField(
            model_name='requesttojoin',
            name='iduser',
            field=models.ForeignKey(db_column='IDUser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='team',
            name='idforum',
            field=models.ForeignKey(db_column='IDForum', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.forum'),
        ),
        migrations.AddField(
            model_name='requesttojoin',
            name='idteam',
            field=models.ForeignKey(db_column='IDTeam', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.team'),
        ),
        migrations.AddField(
            model_name='participate',
            name='idteam',
            field=models.ForeignKey(db_column='IDTeam', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.team'),
        ),
        migrations.AddField(
            model_name='message',
            name='idteam',
            field=models.ForeignKey(db_column='IDTeam', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.team'),
        ),
        migrations.AddField(
            model_name='teammember',
            name='idforum',
            field=models.ForeignKey(db_column='IDForum', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.forum'),
        ),
        migrations.AddField(
            model_name='teammember',
            name='idteam',
            field=models.ForeignKey(db_column='IDTeam', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.team'),
        ),
        migrations.AddField(
            model_name='teammember',
            name='iduser',
            field=models.ForeignKey(db_column='IDUser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tournament',
            name='idforumnumofplayers',
            field=models.ForeignKey(db_column='IDForumNumOfPlayers', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.forumnumofplayers'),
        ),
        migrations.AddField(
            model_name='participate',
            name='idtour',
            field=models.ForeignKey(db_column='IDTour', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.tournament'),
        ),
        migrations.AddField(
            model_name='userparticipated',
            name='idpar',
            field=models.ForeignKey(db_column='IDPar', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.participate'),
        ),
        migrations.AddField(
            model_name='userparticipated',
            name='iduser',
            field=models.ForeignKey(db_column='IDUser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('idadmin', models.OneToOneField(db_column='IDAdmin', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='GameHubApp.createtournamentuser')),
            ],
            options={
                'db_table': 'admin',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Moderator',
            fields=[
                ('idmod', models.OneToOneField(db_column='IDMod', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='GameHubApp.createtournamentuser')),
            ],
            options={
                'db_table': 'moderator',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='tournament',
            name='iduser',
            field=models.ForeignKey(blank=True, db_column='IDUser', null=True, on_delete=django.db.models.deletion.SET_NULL, to='GameHubApp.createtournamentuser'),
        ),
        migrations.AddConstraint(
            model_name='registereduser',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['ACT', 'DEL'])), name='registered_user_status_in_act_or_del'),
        ),
        migrations.AlterUniqueTogether(
            name='follow',
            unique_together={('iduser', 'idforum')},
        ),
        migrations.AddField(
            model_name='forumnotification',
            name='idforum',
            field=models.ForeignKey(db_column='IDForum', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.forum'),
        ),
        migrations.AddField(
            model_name='forumnotification',
            name='idpost',
            field=models.ForeignKey(blank=True, db_column='IDPost', null=True, on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.post'),
        ),
        migrations.AddField(
            model_name='teamnotification',
            name='idteam',
            field=models.ForeignKey(db_column='IDTeam', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.team'),
        ),
        migrations.AddField(
            model_name='teamnotification',
            name='iduser',
            field=models.ForeignKey(blank=True, db_column='IDUser', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tournotification',
            name='idtour',
            field=models.ForeignKey(blank=True, db_column='IDTour', null=True, on_delete=django.db.models.deletion.SET_NULL, to='GameHubApp.tournament'),
        ),
        migrations.AlterUniqueTogether(
            name='forumnumofplayers',
            unique_together={('idforum', 'numberofplayers')},
        ),
        migrations.AlterUniqueTogether(
            name='likedcomment',
            unique_together={('iduser', 'idcom')},
        ),
        migrations.AddConstraint(
            model_name='post',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['ACT', 'DEL'])), name='post_status_in_act_or_del'),
        ),
        migrations.AlterUniqueTogether(
            name='likedpost',
            unique_together={('iduser', 'idpost')},
        ),
        migrations.AddConstraint(
            model_name='comment',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['ACT', 'DEL'])), name='comment_status_in_act_or_del'),
        ),
        migrations.AddConstraint(
            model_name='team',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['ACT', 'DEL'])), name='team_status_in_act_or_del'),
        ),
        migrations.AlterUniqueTogether(
            name='requesttojoin',
            unique_together={('iduser', 'idteam')},
        ),
        migrations.AlterUniqueTogether(
            name='teammember',
            unique_together={('iduser', 'idforum')},
        ),
        migrations.AlterUniqueTogether(
            name='participate',
            unique_together={('idteam', 'idtour')},
        ),
        migrations.AlterUniqueTogether(
            name='userparticipated',
            unique_together={('idpar', 'iduser')},
        ),
        migrations.AddField(
            model_name='moderates',
            name='idadmin',
            field=models.ForeignKey(blank=True, db_column='IDAdmin', null=True, on_delete=django.db.models.deletion.SET_NULL, to='GameHubApp.admin'),
        ),
        migrations.AddField(
            model_name='moderates',
            name='idmod',
            field=models.ForeignKey(db_column='IDMod', on_delete=django.db.models.deletion.CASCADE, to='GameHubApp.moderator'),
        ),
        migrations.AddConstraint(
            model_name='tournament',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['NOT_STARTED', 'IN_PROGRESS', 'FINISHED'])), name='tournament_status'),
        ),
        migrations.AddConstraint(
            model_name='forumnotification',
            constraint=models.CheckConstraint(check=models.Q(('type__in', ['POST_DEL', 'POST_NEW', 'MOD_DELETED', 'MOD_ADDED'])), name='forum_notification_type'),
        ),
        migrations.AddConstraint(
            model_name='teamnotification',
            constraint=models.CheckConstraint(check=models.Q(('type__in', ['TEAM_INVITE', 'TEAM_LEAVE', 'TEAM_JOINED', 'NEW_MSG'])), name='team_notification_type'),
        ),
        migrations.AddConstraint(
            model_name='tournotification',
            constraint=models.CheckConstraint(check=models.Q(('type__in', ['TOUR_JOINED', 'TOUR_STARTED', 'TOUR_KICKED'])), name='tour_notification_type'),
        ),
        migrations.AlterUniqueTogether(
            name='moderates',
            unique_together={('idforum', 'idmod')},
        ),
    ]
